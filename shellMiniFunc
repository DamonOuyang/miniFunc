




#############################
# shell 
# nginx auto_run
#############################
#!/bin/bash
#chkconfig: 2345 80 90
#description: nginx auto_run

PATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:~/bin
export PATH
# Check if user is root
if [ $(id -u) != "0" ]; then
   echo "Error: You must be root to run this script!\n"
   exit 1
fi
NGINXDAEMON=/usr/local/nginx/sbin/nginx
PIDFILE=/usr/local/nginx/logs/nginx.pid
function_start()
{
   echo -en "\033[32;49;1mStarting nginx......\n"
   echo -en "\033[39;49;0m"  
   if [ -f $PIDFILE ]; then
     printf "Nginx is runing!\n"
     exit 1
   else  
       $NGINXDAEMON
       printf "Nginx is the successful start!\n"
   fi
}
function_stop()
{
   echo -en "\033[32;49;1mStoping nginx......\n"
   echo -en "\033[39;49;0m"
   if  [ -f $PIDFILE ]; then
       kill `cat $PIDFILE`
       printf "Nginx program is stoped\n"
   else  
       printf  "Nginx program is not runing!\n"
   fi
}
function_reload()
{
   echo -en "\033[32;49;1mReload nginx......\n"
   echo -en "\033[39;49;0m"
   function_stop
   function_start

}
function_restart()
{
   echo -en "\033[32;49;1mRestart nginx......\n"
   echo -en "\033[39;49;0m"
   printf "Reload Nginx configure...\n"
   $NGINXDAEMON -t
   kill -HUP `cat $PIDFILE`
   printf "Nginx program is reloding!\n"
}
function_kill()
{
   killall nginx
}
function_status()
{
   if ! ps -ef|grep -v grep|grep 'nginx:' > /dev/null 2>&1
   then
       printf "Nginx is down!!!\n"
   else
       printf "Nginx is running now!\n"
   fi
}
if [ "$1" = "start" ]; then
   function_start
elif [ "$1" = "stop" ]; then
   function_stop
elif [ "$1" = "reload" ]; then
   function_reload
elif [ "$1" = "restart" ]; then
   function_restart
elif [ "$1" = "kill" ]; then
   function_kill
elif [ "$1" = "status" ]; then
   function_status
else
   echo -en "\033[32;49;1m Usage: nginx {start|stop|reload|restart|kill|status}\n"
   echo -en "\033[39;49;0m"
fi

------------------------------------------------------------------------------------------------------------------------------------------

#############################
# shell 
# 程序实现fileback
#############################
#!/bin/sh 

DIRNAME=`ls /root | grep bak` 

if [ -z "$DIRNAME" ] ; then 

mkdir /root/bak 

cd /root/bak 

fi

BACKETC=$(date +%Y%m%d)_etc.tar.gz 

tar zcvf  $BACKETC  /etc 

echo "fileback finished!"


------------------------------------------------------------------------------------------------------------------------------------------

#############################
# shell 
# 数据库批量插入数据
#############################
#!/bin/bash

i=1;

MAX_INSERT_ROW_COUNT=$1;

while [ $i -le $MAX_INSERT_ROW_COUNT ]

do
    mysql -hlocalhost -uroot -pdamon -e "use test_1;insert into ts_tb_insertTest values ($i,'dd',$i);"

    d=$(date +%M-%d\ %H\:%m\:%S)

    echo "INSERT HELLO $i @@ $d"

    i=$(($i+1))

    sleep 0.5

done

#exit 0
