十大排序
#                      /\  /\      
#                    ( @ . @ )     
#################################^^^#########^^^##
##                    快速排序                   ##
######################################~..~########
#                      /\  /\      
#                    ( @ . @ )     
#################################^^^#########^^^##
##                    快速排序                   ##
######################################~..~########

#                      /\  /\      
#                    ( @ . @ )     
#################################^^^#########^^^##
##                    快速排序                   ##
######################################~..~########

#                      /\  /\      
#                    ( @ . @ )     
#################################^^^#########^^^##
##                    快速排序                   ##
######################################~..~########
package csdn_quicksort;

public class Csdn_QuickSort 
{
    // 4   9 8 7  1 2 3 6;
    // 1 2 3  4  9 8 7 6 ; // 左边小于中间，中间小于右边
    // 左              右
    // 4
    
    // 4   9 8 7  1 2 3 6; // 找最左边大于第一个数,找最右边小于第一个数
    // 4   3 8 7  1 2 9 6; // 交换
    // 4   3 2 1  7 8 9 6; // 如此循环交换后
    // 1   3 2 4  7 8 9 6;
    public static void show(int [] ints)
    {
        for(int i:ints)
        {
            System.out.print(i+" ");
        }
        System.out.print("\n");
    }
    public static int getmid(int [] ints,int low, int high)
    {
        int temp = ints[low];
        while(low<high)
        {
            while(low<high && ints[high] > temp)
            {
                high--;
            }
            ints[low] = ints[high];
            while(low<high && ints[low] < temp)
            {
                low++;
            }
            ints[high] = ints[low];     
        }
        ints[low] = temp;
        show(ints);

        return low;
        
    }
    
    public static void Qsort(int [] ints,int low, int high)
    {
        if(ints.length <= 1 || ints == null)
        {
            return;
        }
        
        if(low<high)
        {
            int mid = getmid(ints,low,high);
            Qsort(ints,mid+1,high);
            Qsort(ints,low,mid-1);
        }
        
    }
    public static void main(String [] args)
    {
        int [] ints = {4 ,  9, 8, 7,  1, 2, 3, 6};
        show(ints);
        Qsort(ints,0,ints.length - 1);
        show(ints);
        
    }
    
    
    
    

    
}
/*
    public static void show(int [] inst)
    {
        for(int i:inst)
        {
            System.out.print(i + " ");
        }
        System.out.print("\n");
    }
    
    public static int getmid(int [] ints, int low, int high)
    {
        int temp = ints[low];
        while(low < high)
        {
            // 从右往左
            while(low < high && ints[high]>temp)// 最左边大于第一个
            {
                high--;
            }
            ints[low] = ints[high];
            // 从左往右
            while( low < high && ints[low]<temp )// 最右边小于第一个
            {
                low++;
            }
            ints[high] = ints[low];
        }
        ints[low] = temp;
        show(ints);
        return low;
    }
    public static void Qsort(int [] ints,int low,int high)
    {
        if(ints.length <= 1 || ints==null)
        {
            return;
        }
        if(low<high)
        {
            int mid = getmid(ints, low, high);
            Qsort(ints, low, mid-1);// 前段
            Qsort(ints, mid+1, high); 
        }
 
    }

    public static void main(String[] args)
    {
        int [] ints ={4,   9, 8,  7, 1, 2, 3, 6};
        show(ints);
        Qsort(ints,0,ints.length-1);
        show(ints);
        
    }
*/




